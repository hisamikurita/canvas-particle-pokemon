!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([,function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}n.r(e);var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,r=[{key:"norm",value:function(t,e,n){return(t-e)/(n-e)}},{key:"lerp",value:function(t,e,n){return(n-e)*t+e}},{key:"map",value:function(e,n,i,r,a){return t.lerp(t.norm(e,n,i),r,a)}},{key:"clamp",value:function(t,e,n){return Math.min(Math.max(t,Math.min(e,n)),Math.max(e,n))}},{key:"distance",value:function(t,e){var n=e.x-t.x,i=e.y-t.y;return Math.sqrt(n*n+i*i)}},{key:"distanceXY",value:function(t,e,n,i){var r=n-t,a=i-e;return Math.sqrt(r*r+a*a)}},{key:"circleCollision",value:function(e,n){return t.distance(e,n)<=e.radius+n.radius}},{key:"circlePointCollision",value:function(e,n,i){return t.distanceXY(e,n,i.x,i.y)<i.radius}},{key:"pointInRect",value:function(e,n,i){return t.inRange(e,i.x,i.x+i.width)&&t.inRange(n,i.y,i.y+i.height)}},{key:"inRange",value:function(t,e,n){return t>=Math.min(e,n)&&t<=Math.max(e,n)}},{key:"rangeIntersect",value:function(t,e,n,i){return Math.max(t,e)>=Math.min(n,i)&&Math.min(t,e)<=Math.max(n,i)}},{key:"rectIntersect",value:function(e,n){return t.rangeIntersect(e.x,e.x+e.width,n.x,n.x+n.width)&&t.rangeIntersect(e.y,e.y+e.height,n.y,n.y+n.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,e){return t+Math.random()*(e-t)}},{key:"randomInt",value:function(t,e){return Math.floor(t+Math.random()*(e-t+1))}},{key:"randomDist",value:function(e,n,i){for(var r=0,a=0;a<i;a+=1)r+=t.randomRange(e,n);return r/i}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(n=null)&&i(e.prototype,n),r&&i(e,r),t}();function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o={};window.addEventListener("mousemove",(function(t){o.x=t.clientX,o.y=t.clientY}));var u=function(){function t(e,n,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.querySelector("#canvas"),this.ctx=canvas.getContext("2d"),this.color=i,this.x=Math.random()*this.canvas.width,this.y=Math.random()*this.canvas.height,this.x2=e,this.y2=n,this.vx=0,this.vy=0,this.dx=0,this.dy=0,this.ax=Math.random()-.5,this.ay=Math.random()-.5,this.radius=2,this.friction=.05*Math.random()+.94,this.speed=20}var e,n,i;return e=t,(n=[{key:"update",value:function(){this.dist=r.distanceXY(this.x,this.y,o.x,o.y),this.dist<20*this.radius&&(this.dx+=this.ax*o.x/300,this.dy+=this.ay*o.y/300),this.vx=(this.x2-this.x)/this.speed,this.vy=(this.y2-this.y)/this.speed,this.x+=this.vx,this.y+=this.vy,this.dx*=this.friction,this.dy*=this.friction,this.x+=this.dx,this.y+=this.dy}},{key:"draw",value:function(){this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.ctx.fill(),this.ctx.restore()}}])&&a(e.prototype,n),i&&a(e,i),t}();!function(){window.addEventListener("load",(function(){(e=new Stats).domElement.style.position="absolute",e.domElement.style.left="0px",e.domElement.style.right="0px",document.getElementById("stats").appendChild(e.domElement),d(),c()})),window.onresize=function(){r.width=window.innerWidth,r.height=window.innerHeight,s=[],d()};var t,e,n=document.createElement("canvas"),i=n.getContext("2d"),r=document.querySelector("#canvas"),a=r.getContext("2d"),o=0,s=[],h=0;function d(){!function(){var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;window.requestAnimationFrame=t}();var e=window.innerWidth,a=window.innerHeight;n.width=e,n.height=a;var d=new Image;d.src="./images/img02.png",d.addEventListener("load",(function(){i.drawImage(d,(e-d.width)/2,(a-d.height)/2);var n=i.getImageData(0,0,e,a).data;r.width=e,r.height=a;for(var c=0;c<e;c+=Math.round(e/h))for(var l=0;l<a;l+=Math.round(e/h))n[4*(c+l*e)+3]>h&&(t="rgb("+n[4*l*e+4*c]+","+n[4*l*e+4*c+1]+","+n[4*l*e+4*c+2]+")",s.push(new u(c,l,t)));o=s.length}))}function c(){e.update(),a.clearRect(0,0,r.width,r.height);for(var t=0;t<o;t++){var n=s[t];n.update(),n.draw()}requestAnimationFrame(c)}h=navigator.userAgent.indexOf("iPhone")>0||navigator.userAgent.indexOf("Android")>0&&navigator.userAgent.indexOf("Mobile")>0||navigator.userAgent.indexOf("iPad")>0||navigator.userAgent.indexOf("Android")>0?50:200}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,